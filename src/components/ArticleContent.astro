---
import type { ANSContentElement } from '../lib/types/ans';

interface Props {
  contentElements: ANSContentElement[];
}

const { contentElements } = Astro.props;
---

<div class="article-content max-w-3xl mx-auto">
  {contentElements.map((element) => {
    switch (element.type) {
      case 'text':
        return <p class="mb-6 text-lg leading-relaxed text-gray-800">{element.text}</p>;
      
      case 'header':
        const HeaderTag = `h${element.level}` as keyof HTMLElementTagNameMap;
        return <HeaderTag class="font-bold text-gray-900 mb-4 mt-8">{element.text}</HeaderTag>;
      
      case 'list':
        const ListTag = element.list_type === 'ordered' ? 'ol' : 'ul';
        return (
          <ListTag class={`mb-6 ml-6 pl-2 ${element.list_type === 'ordered' ? 'list-decimal' : 'list-disc'}`}>
            {element.items.map(item => (
              <li class="mb-2 text-lg leading-relaxed text-gray-800">{item}</li>
            ))}
          </ListTag>
        );
      
      case 'image':
        return (
          <figure class="my-8">
            <img
              src={element.referent.referent_properties.url}
              alt={element.referent.referent_properties.alt_text || ''}
              class="w-full rounded-lg shadow-md"
            />
            {element.referent.referent_properties.caption && (
              <figcaption class="text-sm text-gray-500 mt-2 text-center italic">
                {element.referent.referent_properties.caption}
              </figcaption>
            )}
          </figure>
        );
      
      case 'quote':
        return (
          <blockquote class="border-l-4 border-gray-300 pl-6 py-2 my-8 italic bg-gray-50 rounded-r">
            <p class="text-xl text-gray-700 mb-3">{element.text}</p>
            <footer class="text-right">
              <cite class="font-semibold text-gray-900 not-italic">{element.citation}</cite>
              {element.role && (
                <span class="block text-sm text-gray-500 not-italic">{element.role}</span>
              )}
            </footer>
          </blockquote>
        );
      
      case 'table':
        return (
          <div class="my-8 overflow-x-auto rounded-lg shadow-md">
            <table class="min-w-full divide-y divide-gray-300">
              <thead class="bg-gray-50">
                <tr>
                  {element.header.map(heading => (
                    <th class="py-3.5 px-4 text-left text-sm font-semibold text-gray-900">
                      {heading}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody class="divide-y divide-gray-200 bg-white">
                {element.rows.map(row => (
                  <tr class="hover:bg-gray-50">
                    {row.map(cell => (
                      <td class="py-4 px-4 text-sm text-gray-500">{cell}</td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        );
      
      default:
        return null;
    }
  })}
</div>

<style>
  .article-content h2 {
    font-size: 1.75rem;
    line-height: 2.25rem;
  }
  
  .article-content h3 {
    font-size: 1.5rem;
    line-height: 2rem;
  }

  .article-content h4 {
    font-size: 1.25rem;
    line-height: 1.75rem;
  }

  .article-content h5,
  .article-content h6 {
    font-size: 1.125rem;
    line-height: 1.75rem;
  }
</style>
